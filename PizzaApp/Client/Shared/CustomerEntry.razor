@using LearningBlazorWeb.Shared
@using Newtonsoft.Json

<EditForm Model="@Customer" OnValidSubmit="@Submit" class="col-md-12 mb-2">
    <DataAnnotationsValidator />

    <FormWatcher @ref="_formWatcher" FieldChanged="@FieldChanged" />
    <div class="form-group row mb-1">
        <label for="Name" class="col-sm-3 col-form-label">Name:</label>
        <div class="col-sm-9">
            <InputText class="form-control" @bind-Value="@Customer.Name" />
            <ValidationMessage For="@(() => Customer.Name)" />
        </div>
    </div>
    <div class="form-group row mb-1">
        <label for="Street" class="col-sm-3 col-form-label">Street:</label>
        <div class="col-sm-9">
            <InputText class="form-control" @bind-Value="@Customer.Street" />
            <ValidationMessage For="@(() => Customer.Street)" />
        </div>
    </div>
    <div class="form-group row mb-1">
        <label for="Street" class="col-sm-3 col-form-label">City:</label>
        <div class="col-sm-9">
            <InputText class="form-control" @bind-Value="@Customer.City" />
            <ValidationMessage For="@(() => Customer.City)" />
        </div>
    </div>
    <div class="form-group mb-0">
        <button type="submit" class="@ButtonClass" disabled="@_isInValid">@ButtonTitle</button>
        Disabled: @_isInValid
    </div>
    @JsonConvert.SerializeObject(Customer)
    <hr />
</EditForm>

@code
{
    private bool _isInValid = true;

    private FormWatcher _formWatcher;

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public string ButtonTitle { get; set; }

    [Parameter]
    public string ButtonClass { get; set; }

    [Parameter]
    public Customer Customer { get; set; }

    [Parameter]
    public EventCallback Submit { get; set; }

    [Parameter]
    public EventCallback<Customer> CustomerChanged { get; set; }

    private async Task FieldChanged(string fieldName)
    {
        await CustomerChanged.InvokeAsync(Customer);
        _isInValid = !_formWatcher.Validate();
    }

}