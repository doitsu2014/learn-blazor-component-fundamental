@page "/fetchdata"
@using ComponentTutorial.Shared
@inject HttpClient Http

<h1>Weather forecast</h1>
<p>This component demonstrates fetching data from the server 1.</p>

@if (forecasts == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <Grid Items="forecasts" TItem="WeatherForecast">
        <Header>
            <th>Date</th>
            <th>Temp. (C)</th>
            <th>Temp. (F)</th>
            <th>Summary</th>
        </Header>
        <Row Context="forecast">
            <td>@forecast.Date.ToShortDateString()</td>
            <td>@forecast.TemperatureC</td>
            <td>@forecast.TemperatureF</td>
            <td>@forecast.Summary</td>
        </Row>
        <Footer>
            <td colspan="4">Spring is in the air 1!</td>
        </Footer>
    </Grid>
    
@*     <ListView ListItems="forecasts"> *@
@*         <ItemTemplate> *@
@*             @forecastItemTemplate(context) *@
@*         </ItemTemplate>  *@
@*     </ListView> *@
@*      *@
@*     @forecastItemTemplate(new WeatherForecast() *@
@*     { *@
@*         Date = new DateTime(), *@
@*         Summary = "100 C", *@
@*         TemperatureC = 100, *@
@*     }); *@
}

@code {
    private WeatherForecast[] forecasts;
    
    private RenderFragment<WeatherForecast> forecastItemTemplate = (forecast)
        => @<li>@forecast.Date.ToLongDateString() - @forecast.Summary</li>;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("WeatherForecast");
    }

}